/* Parser for WomuYuroCompiler.

     Copyright (C) 2005-2015, 2018-2021 Free Software Foundation, Inc.
     Copyright (C) 2023 ark231

     This file is part of WomuYuroCompiler.

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.    If not, see <https://www.gnu.org/licenses/>.    */

%skeleton "lalr1.cc" // -*- C++ -*-
%require "3.8.2"
%header

%define api.token.raw

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%define api.namespace {WomuYuro::yy}
%define api.parser.class {Parser}

%code {
}

%code requires {
    # include <fmt/format.h>
    # include <fmt/ostream.h>
    # include <magic_enum/magic_enum_format.hpp>
    # include "enums.hpp"
    # include <string>
    namespace WomuYuro{
        class Driver;
    }
}


%locations

%define parse.trace
%define parse.error detailed
%define parse.lac full

%code requires{
    namespace WomuYuro::yy {
        class Lexer;    // Generated by reflex with namespace=yy lexer=Lexer lex=yylex
    }
}

%parse-param { WomuYuro::Driver& drv }    // Construct parser object with lexer

%lex-param { WomuYuro::Driver& drv }    // Construct lexr object with lexer

%code {
# include "driver.hpp"
# include "scanner.hpp"
# undef yylex
# define yylex drv.lexer_->yylex
}

%define api.token.prefix {TOK_}
%token
    ASSIGN                   "←"
    MINUS                    "-"
    PLUS                     "+"
    TIMES                    "×"
    SLASH                    "/"
    LPAREN                   "("
    RPAREN                   ")"
    DQUOTE                   "dquote"
    LDAQUOTE                 "«"
    RDAQUOTE                 "»"
    NOUN_MARKER              "se"
    CONST                    "dizazukere"
    SUBJECT_POSTPOSITION     "ni"
    NOMINAL_ADJECTIVE_MARKER "ske"
    PERIOD                   "."
;

%token <std::string>         IDENTIFIER  "identifier"
%token <int64_t>             INTEGER     "integer"
%token <double>              FLOAT       "floating point"
%token <WomuYuro::ValRef>    VALREF      "valref"

%nterm <double> exp
%nterm <WomuYuro::ConstMut> const
%nterm <double*> variable_reference

%printer { fmt::print(yyo,"{}",fmt::ptr($$)); } variable_reference
%printer { fmt::print(yyo,"{}",$$); } <*>

%%
%start lines;

lines:
  %empty                 {}
| lines line             {};

line:
  assignment "."           {}
| variable_declaration "." {}
| exp "."                  { drv.result_ = $1; };

const:
  %empty                 { $$ = WomuYuro::ConstMut::MUT; }
| "dizazukere"           { $$ = WomuYuro::ConstMut::CONST; };


assignment:
  variable_reference "←" exp   { *$1 = $3; };

variable_declaration:
  "«" "identifier" "»" "ni" const "identifier" "valref" "ske" { drv.variables_[$2] = 0.0; };

variable_reference:
  "identifier" "valref" "se" { $$ = &drv.variables_[$1]; };

%left "+" "-";
%left "×" "/";
exp:
  "floating point"   { $$ = $1; }
| "integer"          { $$ = $1; }
| variable_reference { $$ = *$1; }
| exp "+" exp        { $$ = $1 + $3; }
| exp "-" exp        { $$ = $1 - $3; }
| exp "×" exp        { $$ = $1 * $3; }
| exp "/" exp        { $$ = $1 / $3; }
| "(" exp ")"        { $$ = $2; };

%%

void
WomuYuro::yy::Parser::error (const location_type& l, const std::string& m)
{
    std::cerr << l << ": " << m << '\n';
}
