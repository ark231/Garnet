/* Parser for Garnet.

     Copyright (C) 2005-2015, 2018-2021 Free Software Foundation, Inc.
     Copyright (C) 2023 ark231

     This file is part of Garnet.

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.    If not, see <https://www.gnu.org/licenses/>.    */

%skeleton "lalr1.cc" // -*- C++ -*-
%require "3.8.2"
%header

%define api.token.raw

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%define api.namespace {Garnet::yy}
%define api.parser.class {Parser}

%code {
}

%code requires {
    # include <fmt/format.h>
    # include <fmt/ostream.h>
    # include <fmt/ranges.h>
    # include <fmt/std.h>
    # include <magic_enum/magic_enum_format.hpp>
    # include "enums.hpp"
    # include "compilation_unit.hpp"
    # include "concrete_decls.hpp"
    # include "concrete_expressions.hpp"
    # include "concrete_statements.hpp"
    # include "concrete_defs.hpp"
    # include "concrete_infos.hpp"
    # include <string>
    # include "format.hpp"
    # include <algorithm>
    # include "error_nodes.hpp"
    namespace Garnet{
        class Driver;
    }
    namespace GN=Garnet;
}


%locations

%define parse.trace
%define parse.error detailed
%define parse.lac full

%code requires{
    namespace Garnet::yy {
        class Lexer;    // Generated by reflex with namespace=yy lexer=Lexer lex=yylex
    }
}

%parse-param { GN::Driver& drv }    // Construct parser object with lexer

%lex-param { GN::Driver& drv }    // Construct lexr object with lexer

%code {
# include "driver.hpp"
# include "scanner.hpp"
# undef yylex
# define yylex drv.lexer_->yylex
}

%define api.token.prefix {TOK_}
%token
    ASSIGN                   "="
    MINUS                    "-"
    PLUS                     "+"
    DECREMENT                "--"
    INCREMENT                "++"
    LESSTHAN                 "<"
    GREATERTHAN              ">"
    ASTERISK                 "*"
    PERCENT                  "%"
    SLASH                    "/"
    LPAREN                   "("
    RPAREN                   ")"
    DQUOTE                   "dquote"
    PERIOD                   "."
    LBRACKET                 "["
    RBRACKET                 "]"
    RARROW                   "->"
    COMMA                    ","
    LBRACE                   "{"
    RBRACE                   "}"
    SEMICOLON                ";"
    COLON                    ":"
    VAR                      "var"
    LET                      "let"
    FUNC                     "func"
    REF                      "ref"
    RETURN                   "return"
    IF                       "if"
    WHILE                    "while"
    LOOP                     "loop"
    FOR                      "for"
    BREAK                    "break"
    CONTINUE                 "continue"
;

%token <std::string>         IDENTIFIER  "identifier"
%token <int64_t>             INTEGER     "integer"
%token <double>              FLOAT       "floating point"
%token <GN::ValRef>          VALREF      "valref"

%nterm <GN::ConstMut> const
%nterm <std::shared_ptr<GN::ast::VariableReference>> variable_reference
%nterm <std::shared_ptr<GN::ast::CompilationUnit>> unit
%nterm <std::shared_ptr<GN::ast::Sentence>> sentence
%nterm <std::shared_ptr<GN::ast::DeclBase>> decl
%nterm <std::shared_ptr<GN::ast::Expression>> exp
%nterm <std::vector<std::shared_ptr<GN::ast::Expression>>> exp_list
%nterm <std::shared_ptr<GN::ast::Statement>> stmt
%nterm <std::shared_ptr<GN::ast::FunctionDecl>> function_decl
%nterm <std::shared_ptr<GN::ast::VariableDecl>> variable_decl
%nterm <std::shared_ptr<GN::ast::VariableDecl>> variable_init
%nterm <std::vector<std::shared_ptr<GN::ast::Sentence>>> function_body
%nterm <std::shared_ptr<GN::ast::BinaryOperator>> binary_operator
%nterm <std::shared_ptr<GN::ast::FloatingPointLiteral>> floating_point_literal
%nterm <std::shared_ptr<GN::ast::SignedIntegerLiteral>> signed_integer_literal
%nterm <std::shared_ptr<GN::ast::VariableDeclStatement>> variable_decl_statement
%nterm <std::tuple<GN::ValRef,GN::ast::SourceTypeIdentifier>> type_info
// %nterm <struct{GN::ValRef valref;GN::ast::SourceTypeIdentifier type;};> type_info
// %nterm <GN::ValRefType> type_info
%nterm <GN::ast::VariableInfo> var_decl 
%nterm <std::vector<GN::ast::VariableInfo>> var_decl_list
%nterm <std::shared_ptr<GN::ast::Base>> decl_or_def
%nterm <std::shared_ptr<GN::ast::FunctionDef>> function_def
%nterm <std::shared_ptr<GN::ast::FunctionCall>> function_call
%nterm <std::shared_ptr<GN::ast::ReturnStatement>> return_statement
%nterm <GN::ValRef> omittable_ref


%printer { fmt::print(yyo,"{}",fmt::ptr($$)); } variable_reference unit sentence decl exp stmt function_decl variable_decl variable_init binary_operator floating_point_literal signed_integer_literal variable_decl_statement decl_or_def function_def function_call return_statement
%printer { 
    std::vector<const void*> ptrs;
    std::ranges::transform($$,std::back_inserter(ptrs),[](auto p){return fmt::ptr(p);});
    fmt::print(yyo,"{}",ptrs); 
} function_body exp_list
%printer { fmt::print(yyo,"{}",$$); } <*>

%%
%start unit;

unit:
  decl_or_def                     { drv.result_->add_child($1); }
| unit decl_or_def                { drv.result_->add_child($2); };

decl_or_def:
  decl ";"                 { $$ = std::dynamic_pointer_cast<GN::ast::Base>($1); }
| function_def ";"         { $$ = std::dynamic_pointer_cast<GN::ast::Base>($1);}
| error ";"                { 
      yyclearin; 
      $$ = std::dynamic_pointer_cast<GN::ast::Base>(std::make_shared<GN::ast::ErrorNode>());
    }

decl:
    variable_decl            { $$ = std::dynamic_pointer_cast<GN::ast::DeclBase>($1); };

type_info:
    omittable_ref "identifier"  { $$ = {$1, GN::ast::SourceTypeIdentifier{$2}}; }

var_decl:
  const "identifier" ":" type_info{ 
        auto [valref,type] = $4;
        $$ = GN::ast::VariableInfo({$2},{type},valref,$1 == GN::ConstMut::CONST); 
      };

var_decl_list:
  %empty                           { $$ = {}; }
| var_decl                         { $$ = {$1}; }
| var_decl_list "," var_decl       { 
        $$ = std::move($1);
        $$.push_back($3); 
      };

function_decl:
  "func" "identifier" "(" var_decl_list ")" "->" type_info {
        auto [valref,type] = $7;
      $$ = std::make_shared<GN::ast::FunctionDecl>(
            GN::ast::SourceFunctionIdentifier{$2},std::vector{GN::ast::VariableInfo{{"__unspecified__"},type, valref}},GN::ast::VariableInfo{{"__unspecified__"},type,valref}
           );
    };

function_def:
  function_decl "{" function_body "}"            { 
      $$ = std::make_shared<GN::ast::FunctionDef>($1->info(),std::move($3)); 
    }

function_body:
  %empty                   {
      $$ = {};
    }
| function_body sentence   { 
      $$ = std::move($1);
      $$.push_back($2);
    }

sentence:
  stmt ";"                 { $$ = std::dynamic_pointer_cast<GN::ast::Sentence>($1); }
| exp ";"                  { $$ = std::dynamic_pointer_cast<GN::ast::Sentence>($1); }
| error ";"                { 
      yyclearin; 
      $$ = std::dynamic_pointer_cast<GN::ast::Sentence>(std::make_shared<GN::ast::ErrorSentence>());
    }

const:
  "var"           { $$ = GN::ConstMut::MUT; }
| "let"           { $$ = GN::ConstMut::CONST; };


variable_decl:
  var_decl {
      $$ = std::make_shared<GN::ast::VariableDecl>($1.name(), $1.type().name());
    };

variable_init:
  var_decl "=" exp {
      $$ = std::make_shared<GN::ast::VariableDecl>($1.name(), $1.type().name(),$3);
  }

omittable_ref:
  %empty             { $$ = GN::ValRef::VALUE; }
| "ref"              { $$ = GN::ValRef::REFERENCE; }


variable_reference:
  omittable_ref "identifier" { $$ = std::make_shared<GN::ast::VariableReference>(GN::ast::SourceVariableIdentifier($2),$1); };

%left "<" ">";
%left "=";
%left "+" "-";
%left "*" "/" "%";

binary_operator:
  exp "+" exp        { $$ = std::make_shared<GN::ast::BinaryOperator>(GN::ast::BinaryOperator::OperatorType::ADD,$1,$3); }
| exp "-" exp        { $$ = std::make_shared<GN::ast::BinaryOperator>(GN::ast::BinaryOperator::OperatorType::SUB,$1,$3); }
| exp "*" exp        { $$ = std::make_shared<GN::ast::BinaryOperator>(GN::ast::BinaryOperator::OperatorType::MUL,$1,$3); }
| exp "/" exp        { $$ = std::make_shared<GN::ast::BinaryOperator>(GN::ast::BinaryOperator::OperatorType::DIV,$1,$3); }
| exp "%" exp        { $$ = std::make_shared<GN::ast::BinaryOperator>(GN::ast::BinaryOperator::OperatorType::MOD,$1,$3); }
| exp "=" exp        { $$ = std::make_shared<GN::ast::BinaryOperator>(GN::ast::BinaryOperator::OperatorType::ASSIGN,$1,$3); }
| exp "<" exp        { $$ = std::make_shared<GN::ast::BinaryOperator>(GN::ast::BinaryOperator::OperatorType::LESS,$1,$3); }
| exp ">" exp        { $$ = std::make_shared<GN::ast::BinaryOperator>(GN::ast::BinaryOperator::OperatorType::GREATER,$1,$3); }
;

floating_point_literal:
  "floating point"   { $$ = std::make_shared<GN::ast::FloatingPointLiteral>($1); };

signed_integer_literal:
  "integer"          { $$ = std::make_shared<GN::ast::SignedIntegerLiteral>($1); };

exp_list:
  %empty             { $$ = {}; }
| exp_list exp       { 
      $$ = std::move($1); 
      $$.push_back($2);
    }

function_call:
  "taf" "(" exp_list ")" "«" "identifier" "»" { 
      $$ = std::make_shared<GN::ast::FunctionCall>(GN::ast::SourceFunctionIdentifier{$6},std::move($3)); 
    }

exp:
  floating_point_literal { $$ = std::dynamic_pointer_cast<GN::ast::Expression>($1); }
| signed_integer_literal { $$ = std::dynamic_pointer_cast<GN::ast::Expression>($1); }
| variable_reference     { $$ = std::dynamic_pointer_cast<GN::ast::Expression>($1); }
| binary_operator        { $$ = std::dynamic_pointer_cast<GN::ast::Expression>($1); }
| function_call          { $$ = std::dynamic_pointer_cast<GN::ast::Expression>($1); }
| "(" exp ")"            { $$ = $2; }
| "(" error ")"          { 
      yyclearin;
      $$ = std::dynamic_pointer_cast<GN::ast::Expression>(std::make_shared<GN::ast::ErrorExpression>());
    }

variable_decl_statement:
  variable_decl          { $$ = std::make_shared<GN::ast::VariableDeclStatement>($1); }
| variable_init          { $$ = std::make_shared<GN::ast::VariableDeclStatement>($1); }

return_statement:
  "return" exp                { $$ = std::make_shared<GN::ast::ReturnStatement>($2); }

stmt:
  variable_decl_statement { $$ = std::dynamic_pointer_cast<GN::ast::Statement>($1); }
| return_statement        { $$ = std::dynamic_pointer_cast<GN::ast::Statement>($1); }

%%

void
GN::yy::Parser::error (const location_type& l, const std::string& m)
{
    drv.print_error(l,m);
}
