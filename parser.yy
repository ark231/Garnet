/* Parser for WomuYuroCompiler.

     Copyright (C) 2005-2015, 2018-2021 Free Software Foundation, Inc.
     Copyright (C) 2023 ark231

     This file is part of WomuYuroCompiler.

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.    If not, see <https://www.gnu.org/licenses/>.    */

%skeleton "lalr1.cc" // -*- C++ -*-
%require "3.8.2"
%header

%define api.token.raw

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%define api.namespace {WomuYuro::yy}
%define api.parser.class {Parser}

%code {
}

%code requires {
    # include <fmt/format.h>
    # include <fmt/ostream.h>
    # include <fmt/ranges.h>
    # include <fmt/std.h>
    # include <magic_enum/magic_enum_format.hpp>
    # include "enums.hpp"
    # include "compilation_unit.hpp"
    # include "concrete_decls.hpp"
    # include "concrete_expressions.hpp"
    # include "concrete_statements.hpp"
    # include "concrete_defs.hpp"
    # include "concrete_infos.hpp"
    # include <string>
    # include "format.hpp"
    # include <algorithm>
    namespace WomuYuro{
        class Driver;
    }
}


%locations

%define parse.trace
%define parse.error detailed
%define parse.lac full

%code requires{
    namespace WomuYuro::yy {
        class Lexer;    // Generated by reflex with namespace=yy lexer=Lexer lex=yylex
    }
}

%parse-param { WomuYuro::Driver& drv }    // Construct parser object with lexer

%lex-param { WomuYuro::Driver& drv }    // Construct lexr object with lexer

%code {
# include "driver.hpp"
# include "scanner.hpp"
# undef yylex
# define yylex drv.lexer_->yylex
}

%define api.token.prefix {TOK_}
%token
    ASSIGN                   "←"
    MINUS                    "-"
    PLUS                     "+"
    TIMES                    "×"
    PERCENT                  "%"
    SLASH                    "/"
    LPAREN                   "("
    RPAREN                   ")"
    DQUOTE                   "dquote"
    LDAQUOTE                 "«"
    RDAQUOTE                 "»"
    NOUN_MARKER              "se"
    CONST                    "dizazukere"
    SUBJECT_POSTPOSITION     "ni"
    NOMINAL_ADJECTIVE_MARKER "ske"
    PERIOD                   "."
    LBRACKET                 "["
    RBRACKET                 "]"
    RARROW                   "→"
    COMMA                    ","
    INVERTED_VERB_MARKER     "taf"
;

%token <std::string>         IDENTIFIER  "identifier"
%token <int64_t>             INTEGER     "integer"
%token <double>              FLOAT       "floating point"
%token <WomuYuro::ValRef>    VALREF      "valref"

%nterm <WomuYuro::ConstMut> const
%nterm <std::shared_ptr<WomuYuro::ast::VariableReference>> variable_reference
%nterm <std::shared_ptr<WomuYuro::ast::CompilationUnit>> unit
%nterm <std::shared_ptr<WomuYuro::ast::Sentence>> sentence
%nterm <std::shared_ptr<WomuYuro::ast::DeclBase>> decl
%nterm <std::shared_ptr<WomuYuro::ast::Expression>> exp
%nterm <std::vector<std::shared_ptr<WomuYuro::ast::Expression>>> exp_list
%nterm <std::shared_ptr<WomuYuro::ast::Statement>> stmt
%nterm <std::shared_ptr<WomuYuro::ast::FunctionDecl>> function_decl
%nterm <std::shared_ptr<WomuYuro::ast::VariableDecl>> variable_decl
%nterm <std::vector<std::shared_ptr<WomuYuro::ast::Sentence>>> function_body
%nterm <std::shared_ptr<WomuYuro::ast::BinaryOperator>> binary_operator
%nterm <std::shared_ptr<WomuYuro::ast::FloatingPointLiteral>> floating_point_literal
%nterm <std::shared_ptr<WomuYuro::ast::SignedIntegerLiteral>> signed_integer_literal
%nterm <std::shared_ptr<WomuYuro::ast::VariableDeclStatement>> variable_decl_statement
%nterm <WomuYuro::ast::VariableInfo> var_type_info 
%nterm <std::vector<WomuYuro::ast::VariableInfo>> var_type_info_list
%nterm <std::optional<WomuYuro::ast::VariableInfo>> omittable_var_type_info
%nterm <WomuYuro::ast::VariableInfo> var_info 
%nterm <std::vector<WomuYuro::ast::VariableInfo>> var_info_list
%nterm <std::shared_ptr<WomuYuro::ast::Base>> decl_or_def
%nterm <std::shared_ptr<WomuYuro::ast::FunctionDef>> function_def
%nterm <std::shared_ptr<WomuYuro::ast::FunctionCall>> function_call
%nterm <std::shared_ptr<WomuYuro::ast::ReturnStatement>> return_statement


%printer { fmt::print(yyo,"{}",fmt::ptr($$)); } variable_reference unit sentence decl exp stmt function_decl variable_decl binary_operator floating_point_literal signed_integer_literal variable_decl_statement decl_or_def function_def function_call return_statement
%printer { 
    std::vector<const void*> ptrs;
    std::ranges::transform($$,std::back_inserter(ptrs),[](auto p){return fmt::ptr(p);});
    fmt::print(yyo,"{}",ptrs); 
} function_body exp_list
%printer { fmt::print(yyo,"{}",$$); } <*>

%%
%start unit;

unit:
  decl_or_def                     { drv.result_->add_child($1); }
| unit decl_or_def                { drv.result_->add_child($2); };

decl_or_def:
  decl "."                 { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Base>($1); }
| function_def "."         { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Base>($1);}

decl:
  function_decl            { $$ = std::dynamic_pointer_cast<WomuYuro::ast::DeclBase>($1); }
| variable_decl            { $$ = std::dynamic_pointer_cast<WomuYuro::ast::DeclBase>($1); };

var_type_info:
  const "identifier" "valref" "se"  { 
        $$ = WomuYuro::ast::VariableInfo({"__Unspecified__"},{WomuYuro::ast::SourceTypeIdentifier{$2}},$3,$1 == WomuYuro::ConstMut::CONST); 
      };

var_type_info_list:
  %empty                                { $$ = {}; }
| var_type_info                         { $$ = {$1}; }
| var_type_info_list "," var_type_info  { 
        $$ = std::move($1);
        $$.push_back($3); 
      };
omittable_var_type_info:
  %empty                                 { $$ = std::nullopt; }
| var_type_info                          { $$ = $1; }

var_info:
  const "«" "identifier" "»" "identifier" "valref" "se"  { 
        $$ = WomuYuro::ast::VariableInfo({$3},{WomuYuro::ast::SourceTypeIdentifier{$5}},$6,$1 == WomuYuro::ConstMut::CONST); 
      };

var_info_list:
  %empty                      { $$ = {}; }
| var_info                    { $$ = {$1}; }
| var_info_list "," var_info  { 
        $$ = std::move($1);
        $$.push_back($3); 
      };

function_decl:
  "«" "identifier" "»" "ni" "dizazukere" "[" "(" var_type_info_list ")" "→" "(" omittable_var_type_info ")" "]" "valref" "ske" {
      if($15 != WomuYuro::ValRef::REFERENCE){
          error(@15,"error: A function variable must be a reference to the function.");
          YYERROR;
      }
      $$ = std::make_shared<WomuYuro::ast::FunctionDecl>(WomuYuro::ast::SourceFunctionIdentifier{$2},$8,$12);
    };

function_def:
  "identifier" "valref" "se" "←" "(" var_info_list ")" "[" function_body "]"            { 
  /*
      if($2 != WomuYuro::ValRef::REFERENCE){
          error(@2,"error: A function variable must be a reference to the function.");
          YYERROR;
      }
      */
      $$ = std::make_shared<WomuYuro::ast::FunctionDef>(WomuYuro::ast::FunctionInfo{WomuYuro::ast::SourceFunctionIdentifier{$1},$6,{}},std::move($9)); 
    }

function_body:
  sentence                 { 
      $$ = {$1};
    }
| function_body sentence   { 
      $$ = std::move($1);
      $$.push_back($2);
    }

sentence:
  stmt "."                 { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Sentence>($1); }
| exp "."                  { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Sentence>($1); };

const:
  %empty                 { $$ = WomuYuro::ConstMut::MUT; }
| "dizazukere"           { $$ = WomuYuro::ConstMut::CONST; };


variable_decl:
  "«" "identifier" "»" "ni" const "identifier" "valref" "ske" {
      $$ = std::make_shared<WomuYuro::ast::VariableDecl>(WomuYuro::ast::SourceVariableIdentifier($2),WomuYuro::ast::SourceTypeIdentifier($6));
    };

variable_reference:
  "identifier" "valref" "se" { $$ = std::make_shared<WomuYuro::ast::VariableReference>(WomuYuro::ast::SourceVariableIdentifier($1),$2); };

%left "←";
%left "+" "-";
%left "×" "/" "%";

binary_operator:
  exp "+" exp        { $$ = std::make_shared<WomuYuro::ast::BinaryOperator>(WomuYuro::ast::BinaryOperator::OperatorType::ADD,$1,$3); }
| exp "-" exp        { $$ = std::make_shared<WomuYuro::ast::BinaryOperator>(WomuYuro::ast::BinaryOperator::OperatorType::SUB,$1,$3); }
| exp "×" exp        { $$ = std::make_shared<WomuYuro::ast::BinaryOperator>(WomuYuro::ast::BinaryOperator::OperatorType::MUL,$1,$3); }
| exp "/" exp        { $$ = std::make_shared<WomuYuro::ast::BinaryOperator>(WomuYuro::ast::BinaryOperator::OperatorType::DIV,$1,$3); }
| exp "%" exp        { $$ = std::make_shared<WomuYuro::ast::BinaryOperator>(WomuYuro::ast::BinaryOperator::OperatorType::MOD,$1,$3); }
| exp "←" exp        { $$ = std::make_shared<WomuYuro::ast::BinaryOperator>(WomuYuro::ast::BinaryOperator::OperatorType::ASSIGN,$1,$3); };

floating_point_literal:
  "floating point"   { $$ = std::make_shared<WomuYuro::ast::FloatingPointLiteral>($1); };

signed_integer_literal:
  "integer"          { $$ = std::make_shared<WomuYuro::ast::SignedIntegerLiteral>($1); };

exp_list:
  %empty             { $$ = {}; }
| exp_list exp       { 
      $$ = std::move($1); 
      $$.push_back($2);
    }

function_call:
  "taf" "(" exp_list ")" "«" "identifier" "»" { 
      $$ = std::make_shared<WomuYuro::ast::FunctionCall>(WomuYuro::ast::SourceFunctionIdentifier{$6},std::move($3)); 
    }

exp:
  floating_point_literal { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Expression>($1); }
| signed_integer_literal { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Expression>($1); }
| variable_reference     { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Expression>($1); }
| binary_operator        { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Expression>($1); }
| function_call          { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Expression>($1); }
| "(" exp ")"            { $$ = $2; };

variable_decl_statement:
  variable_decl          { $$ = std::make_shared<WomuYuro::ast::VariableDeclStatement>($1); }

return_statement:
  "→" exp                { $$ = std::make_shared<WomuYuro::ast::ReturnStatement>($2); }

stmt:
  variable_decl_statement { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Statement>($1); }
| return_statement        { $$ = std::dynamic_pointer_cast<WomuYuro::ast::Statement>($1); }

%%

void
WomuYuro::yy::Parser::error (const location_type& l, const std::string& m)
{
    std::cerr << l << ": " << m << '\n';
}
